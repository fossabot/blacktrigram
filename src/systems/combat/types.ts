// filepath: /workspaces/blacktrigram/src/systems/combat/types.ts
/**
 * Type definitions for combat types
 * Auto-generated by type migration script
 */

// Combat-specific imports from shared types
import type { PlayerState, TrigramStance } from "../../types";
import { StatusEffect } from "../types";
import { VitalPointHitResult } from "../vitalpoint";

export interface KoreanTechnique {
  id: string;
  name: {
    korean: string;
    english: string;
    romanized: string;
  };
  koreanName: string;
  englishName: string;
  romanized: string;
  description: {
    korean: string;
    english: string;
  };
  stance: TrigramStance;
  type: string;
  damageType: string;
  damage: number;
  kiCost: number;
  staminaCost: number;
  accuracy: number;
  range: number;
  executionTime: number;
  recoveryTime: number;
  critChance: number;
  critMultiplier: number;
  effects: any[];
}

export interface CombatResult {
  readonly success: boolean;
  readonly damage: number;
  readonly isCritical: boolean;
  readonly hit: boolean;
  readonly isBlocked: boolean;
  readonly vitalPointHit: boolean;
  readonly effects: readonly any[];
  readonly attacker?: any;
  readonly defender?: any;
  readonly technique?: KoreanTechnique;
  readonly criticalHit: boolean;
  readonly timestamp: number;
}

export interface TrainingCombatResult extends CombatResult {
  readonly accuracyScore: number;
  readonly techniqueScore: number;
  readonly formScore: number;
  readonly improvementAreas: readonly string[];
  readonly nextTrainingGoals: readonly string[];
}

export interface CombatEventData {
  readonly id: string;
  readonly timestamp: number;
  readonly type:
    | "attack"
    | "block"
    | "critical"
    | "vital_point"
    | "stance_change";
  readonly attacker: number;
  readonly defender: number;
  readonly damage: number;
  readonly technique?: string;
  readonly result: "hit" | "miss" | "blocked" | "critical";
  readonly effects?: readonly string[];
}

export interface CombatStats {
  readonly totalDamage: number;
  readonly criticalHits: number;
  readonly vitalPointHits: number;
  readonly techniquesUsed: number;
  readonly stamina: number;
  readonly ki: number;
}

export interface CombatSystemInterface {
  calculateDamage: (
    technique: KoreanTechnique,
    attacker: PlayerState,
    defender: PlayerState,
    hitResult: VitalPointHitResult
  ) => {
    baseDamage: number;
    modifierDamage: number;
    totalDamage: number;
    effectsApplied: readonly StatusEffect[];
    finalDefenderState?: Partial<PlayerState>;
  };
  resolveAttack: (
    attacker: PlayerState,
    defender: PlayerState,
    technique: KoreanTechnique,
    targetedVitalPointId?: string
  ) => CombatResult;
  applyCombatResult: (
    result: CombatResult,
    attacker: PlayerState,
    defender: PlayerState
  ) => { updatedAttacker: PlayerState; updatedDefender: PlayerState };
  getAvailableTechniques: (player: PlayerState) => readonly KoreanTechnique[];
}

export interface CombatSystem {
  readonly update: (
    players: readonly [PlayerState, PlayerState],
    deltaTime: number
  ) => any;
  readonly processTechnique: (
    technique: KoreanTechnique,
    attacker: PlayerState,
    defender: PlayerState
  ) => any;
  readonly calculateDamage: (
    technique: KoreanTechnique,
    attacker: PlayerState,
    defender: PlayerState
  ) => number;
}
