// filepath: /workspaces/blacktrigram/src/systems/combat/types.ts
/**
 * Type definitions for combat types
 * Auto-generated by type migration script
 */

// Combat-specific imports from shared types
import { GameMode, GamePhase, Position, TrigramStance } from "@/types";
import type { PlayerMatchStats, PlayerState } from "../../types/player";
import { StatusEffect } from "../types";
import { VitalPointHitResult } from "../vitalpoint";
import { KoreanTechnique } from "../vitalpoint/types";

export interface CombatResult {
  readonly success: boolean;
  readonly damage: number;
  readonly isCritical: boolean;
  readonly hit: boolean;
  readonly isBlocked: boolean;
  readonly vitalPointHit: boolean;
  readonly effects: readonly any[];
  readonly attacker?: any;
  readonly defender?: any;
  readonly technique?: KoreanTechnique;
  readonly criticalHit: boolean;
  readonly timestamp: number;
}

// Round result information
export interface RoundResult {
  readonly roundNumber: number;
  readonly winner: PlayerState | null;
  readonly method: "knockout" | "time" | "forfeit" | "draw";
  readonly duration: number;
  readonly finalHealth: readonly [number, number];
  readonly damageDealt: readonly [number, number];
  readonly combatEvents: readonly CombatResult[];
}

// Match statistics - Fix: Remove duplicate and use single definition
export interface MatchStatistics {
  // Top-level match statistics
  readonly totalDamageDealt: number;
  readonly totalDamageTaken: number;
  readonly criticalHits: number;
  readonly vitalPointHits: number;
  readonly techniquesUsed: number;
  readonly perfectStrikes: number;
  readonly consecutiveWins: number;
  readonly matchDuration: number;
  readonly totalMatches: number;
  readonly maxRounds: number;
  readonly winner: number;
  readonly totalRounds: number;
  readonly currentRound: number;
  readonly timeRemaining: number;
  readonly combatEvents: readonly CombatEventData[];
  readonly finalScore: { player1: number; player2: number };
  readonly roundsWon: { player1: number; player2: number };

  // Individual player statistics
  readonly player1: PlayerMatchStats;
  readonly player2: PlayerMatchStats;
}

// Main game state interface
export interface GameState {
  readonly mode: GameMode;
  readonly phase: GamePhase;
  readonly players: readonly [PlayerState, PlayerState];
  readonly currentRound: number;
  readonly maxRounds: number;
  readonly timeRemaining: number;
  readonly isPaused: boolean;
  readonly matchStatistics: MatchStatistics;
  readonly winner?: PlayerState | null;
}

export interface TrainingCombatResult extends CombatResult {
  readonly accuracyScore: number;
  readonly techniqueScore: number;
  readonly formScore: number;
  readonly improvementAreas: readonly string[];
  readonly nextTrainingGoals: readonly string[];
}

export interface CombatEventData {
  readonly id: string;
  readonly timestamp: number;
  readonly type:
    | "attack"
    | "block"
    | "critical"
    | "vital_point"
    | "stance_change";
  readonly attacker: number;
  readonly defender: number;
  readonly damage: number;
  readonly technique?: string;
  readonly result: "hit" | "miss" | "blocked" | "critical";
  readonly effects?: readonly string[];
}

export interface CombatStats {
  readonly totalDamage: number;
  readonly criticalHits: number;
  readonly vitalPointHits: number;
  readonly techniquesUsed: number;
  readonly stamina: number;
  readonly ki: number;
}

export interface CombatSystemInterface {
  calculateDamage: (
    technique: KoreanTechnique,
    attacker: PlayerState,
    defender: PlayerState,
    hitResult: VitalPointHitResult
  ) => {
    baseDamage: number;
    modifierDamage: number;
    totalDamage: number;
    effectsApplied: readonly StatusEffect[];
    finalDefenderState?: Partial<PlayerState>;
  };
  resolveAttack: (
    attacker: PlayerState,
    defender: PlayerState,
    technique: KoreanTechnique,
    targetedVitalPointId?: string
  ) => CombatResult;
  applyCombatResult: (
    result: CombatResult,
    attacker: PlayerState,
    defender: PlayerState
  ) => { updatedAttacker: PlayerState; updatedDefender: PlayerState };
  getAvailableTechniques: (player: PlayerState) => readonly KoreanTechnique[];
}

export interface CombatSystem {
  readonly update: (
    players: readonly [PlayerState, PlayerState],
    deltaTime: number
  ) => any;
  readonly processTechnique: (
    technique: KoreanTechnique,
    attacker: PlayerState,
    defender: PlayerState
  ) => any;
  readonly calculateDamage: (
    technique: KoreanTechnique,
    attacker: PlayerState,
    defender: PlayerState
  ) => number;
}

export interface TrainingResult {
  readonly accuracyScore: number;
  readonly techniqueScore: number;
  readonly formScore: number;
  readonly improvementAreas: readonly string[];
  readonly nextTrainingGoals: readonly string[];
  readonly hit: boolean;
  readonly damage: number;
  readonly timestamp: number;
}

export interface TrainingSession {
  readonly id: string;
  readonly startTime: number;
  readonly endTime?: number;
  readonly mode: TrainingMode;
  readonly difficulty: TrainingDifficulty;
  readonly player: PlayerState;
  readonly results: readonly TrainingResult[];
  readonly overallScore: number;
  readonly improvements: readonly string[];
}

export type TrainingMode =
  | "basics"
  | "techniques"
  | "sparring"
  | "philosophy"
  | "meditation";
export type TrainingDifficulty =
  | "beginner"
  | "intermediate"
  | "advanced"
  | "master";

export interface TrainingTarget {
  readonly id: string;
  readonly position: Position;
  readonly size: number;
  readonly type: "vital_point" | "technique_zone" | "balance_point";
  readonly difficulty: number;
  readonly active: boolean;
}

export interface TrainingProgression {
  readonly currentLevel: number;
  readonly experience: number;
  readonly masteredTechniques: readonly string[];
  readonly availableStances: readonly TrigramStance[];
  readonly achievements: readonly string[];
}
