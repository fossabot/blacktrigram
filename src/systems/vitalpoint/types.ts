/**
 * Type definitions for vitalpoint types
 * Auto-generated by type migration script
 */

// Vital point system imports from shared types
import type {
  DamageRange,
  KoreanText,
  PlayerArchetype,
  Position,
  TrigramStance,
  VitalPointCategory,
  VitalPointEffectType,
  VitalPointSeverity,
} from "../../types";
import { EffectIntensity } from "../effects";
import { PlayerState } from "../player";
import { StatusEffect } from "../types";

export interface KoreanTechnique {
  id: string;
  name: {
    korean: string;
    english: string;
    romanized: string;
  };
  koreanName: string;
  englishName: string;
  romanized: string;
  description: {
    korean: string;
    english: string;
  };
  stance: TrigramStance;
  type: string;
  damageType: string;
  damage: number;
  kiCost: number;
  staminaCost: number;
  accuracy: number;
  range: number;
  executionTime: number;
  recoveryTime: number;
  critChance: number;
  critMultiplier: number;
  effects: any[];
}

/**
 * Korean text with romanization for vital point names
 */
export interface VitalPointNames {
  readonly korean: string;
  readonly english: string;
  readonly romanized: string;
}

/**
 * Unified VitalPoint interface matching actual usage
 */
export interface VitalPoint {
  readonly id: string;
  readonly names: VitalPointNames; // âœ… Fixed: Use 'names' structure
  readonly position: Position;
  readonly category: VitalPointCategory;
  readonly severity: VitalPointSeverity;
  readonly baseDamage?: number;
  readonly effects: readonly VitalPointEffect[];
  readonly description: KoreanText;
  readonly targetingDifficulty: number;
  readonly effectiveStances: readonly TrigramStance[];

  // Optional properties for backwards compatibility
  readonly korean?: KoreanText;
  readonly english?: string;
  readonly anatomicalName?: string;
  readonly radius?: number; // Make optional with default
  readonly damage?: DamageRange;
  readonly difficulty?: number;
  readonly requiredForce?: number; // Make optional with default
  readonly safetyWarning?: string;
  readonly location?: Position;
  readonly region?: string;
}

/**
 * Result of a vital point hit calculation
 * Unified to resolve property name conflicts
 */
export interface VitalPointHitResult {
  /** Whether the vital point was successfully hit */
  readonly hit: boolean;

  /** The vital point that was hit (primary property name) */
  readonly vitalPointHit?: VitalPoint;

  /** Legacy property name for backwards compatibility */
  readonly vitalPoint?: VitalPoint;

  /** Base damage from the vital point hit */
  readonly damage: number;

  /** Status effects applied by the vital point hit */
  readonly effects: readonly StatusEffect[];

  /** Severity level of the vital point hit */
  readonly severity: VitalPointSeverity;

  /** Accuracy of the hit (0-1) */
  readonly accuracy?: number;

  /** Additional multiplier applied to damage */
  readonly multiplier?: number;
}

export interface VitalPointEffect {
  readonly id: string;
  readonly type: VitalPointEffectType;
  readonly intensity: EffectIntensity;
  readonly duration: number;
  readonly description: KoreanText;
  readonly stackable: boolean;
  readonly source?: string;
}

export interface DamageResult {
  readonly damage: number;
  readonly effects: readonly StatusEffect[];
  readonly isCritical: boolean;
  readonly isVitalPoint: boolean;
}

export interface AnatomicalRegion {
  readonly id: string;
  readonly name: KoreanText;
  readonly boundaries: readonly Position[];
  readonly vitalPoints: readonly VitalPoint[];
}

export interface BodyRegionData {
  readonly id: string;
  readonly name: KoreanText;
  readonly boundaries: readonly Position[];
  readonly vitalPoints: readonly VitalPoint[];
}

export interface VitalPointSystemConfig {
  readonly precisionRequired: number;
  readonly damageMultipliers: Record<string, number>;
  readonly effectDurations: Record<string, number>;
}

export interface VitalPointSystemInterface {
  processHit: (
    targetPosition: Position,
    technique: KoreanTechnique,
    baseDamage: number,
    attackerArchetype: PlayerArchetype,
    targetDimensions: { width: number; height: number },
    targetedVitalPointId?: string | null
  ) => VitalPointHitResult;
  calculateHit: (
    technique: KoreanTechnique,
    targetVitalPointId: string | null,
    accuracyRoll: number,
    attackerPosition: Position,
    defenderPosition: Position,
    defenderStance: TrigramStance
  ) => VitalPointHitResult;
  applyVitalPointEffects: (
    player: PlayerState,
    vitalPoint: VitalPoint,
    intensityMultiplier?: number
  ) => PlayerState;
}

export interface VitalPointSystem {
  readonly getVitalPoints: () => readonly VitalPoint[];
  readonly checkHit: (position: Position, force: number) => VitalPointHitResult;
  readonly calculateDamage: (vitalPoint: VitalPoint, force: number) => number;
}

// Define VitalPoint locally to avoid circular import
export interface VitalPoint {
  readonly id: string;
  readonly names: {
    readonly korean: string;
    readonly english: string;
    readonly romanized: string;
  };
  readonly position: Position;
  readonly category: VitalPointCategory;
  readonly severity: VitalPointSeverity;
  readonly baseDamage?: number;
  readonly effects: readonly VitalPointEffect[];
  readonly description: KoreanText;
  readonly targetingDifficulty: number;
  readonly effectiveStances: readonly TrigramStance[];
}

export interface VitalPointEffect {
  readonly id: string;
  readonly type: VitalPointEffectType;
  readonly intensity: EffectIntensity;
  readonly duration: number;
  readonly description: KoreanText;
  readonly stackable: boolean;
  readonly source?: string;
}

// Vital point effect
// Player archetype data
export interface PlayerArchetypeData {
  readonly id: string;
  readonly name: KoreanText;
  readonly description: KoreanText;
  readonly baseHealth: number;
  readonly baseKi: number;
  readonly baseStamina: number;
  readonly coreStance: TrigramStance;
  readonly theme: {
    primary: number;
    secondary: number;
  };
  readonly colors: {
    primary: number;
    secondary: number;
  };
  readonly stats: {
    attackPower: number;
    defense: number;
    speed: number;
    technique: number;
  };
  readonly favoredStances: readonly TrigramStance[];
  readonly specialAbilities: readonly string[];
  readonly philosophy: KoreanText;
}

// Region data
export interface RegionData {
  readonly name: KoreanText;
  readonly boundaries: readonly Position[];
  readonly vitalPoints: readonly VitalPoint[];
  readonly vulnerabilities: readonly string[];
}
