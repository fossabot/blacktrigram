/**
 * Type definitions for systems types
 * Auto-generated by type migration script
 */

// System imports from shared types - avoid circular dependencies
import { AudioSystemInterface } from "@/audio";
import { KOREAN_COLORS } from "@/types";
import {
  KoreanText,
  PlayerArchetype,
  Position,
  TrigramStance,
} from "@/types/common";
import type {
  EffectIntensity,
  EnvironmentalEffectType,
  HitEffectType,
  ParticleType,
} from "@/types/effects";

export interface AnimationConfig {
  readonly name: string;
  readonly frames: readonly AnimationFrame[];
  readonly loop?: boolean;
  readonly speed?: number;
}

export interface CombatSystemConfig {
  readonly damageMultiplier: number;
  readonly criticalChance: number;
}

export interface TrigramSystemConfig {
  readonly transitionSpeed: number;
  readonly energyCost: number;
}

export interface AISystemConfig {
  readonly difficulty: "easy" | "medium" | "hard" | "expert";
  readonly reactionTime: number;
}

export interface VitalPointSystemConfig {
  readonly precisionRequired: number;
  readonly damageMultipliers: Record<string, number>;
  readonly effectDurations: Record<string, number>;
}

// Direct PixiJS imports for core types
import type {
  Application as PixiApplication,
  DisplayObject as PixiDisplayObject,
  Texture,
} from "pixi.js";
import { PlayerArchetypeData } from "./vitalpoint";

export interface AnimationState {
  readonly currentAnimationName?: string;
  readonly currentFrameIndex: number;
  readonly isPlaying: boolean;
  readonly elapsedTimeInFrame: number;
}

export interface CollisionData {
  readonly entityA: EntityId;
  readonly entityB: EntityId;
  readonly normal: Velocity;
  readonly penetration: number;
}

export interface PhysicsEntityConfig {
  readonly position: Position;
  readonly velocity?: Velocity;
  readonly mass?: number;
  readonly friction?: number;
  readonly restitution?: number;
  readonly shape:
    | { type: "circle"; radius: number }
    | { type: "rectangle"; width: number; height: number };
  readonly isStatic?: boolean;
}

export interface PhysicsEntityState {
  readonly position: Position;
  readonly velocity: Velocity;
  readonly acceleration?: Velocity;
  readonly angularVelocity?: number;
}

export interface RenderableConfig {
  readonly displayObject: PixiDisplayObject;
  readonly zOrder?: number;
  readonly visible?: boolean;
  readonly alpha?: number;
  readonly parent?: EntityId | "stage";
}

export interface StatusEffect {
  readonly id: string;
  readonly type: string;
  readonly intensity: EffectIntensity;
  readonly duration: number;
  readonly description: KoreanText;
  readonly stackable: boolean;
  readonly source: string;
  readonly startTime: number;
  readonly endTime: number;
}

export interface HitEffect {
  readonly id: string;
  readonly type: HitEffectType;
  readonly attackerId: string;
  readonly defenderId: string;
  readonly timestamp: number;
  readonly duration: number;
  readonly position?: Position;
  readonly velocity?: { x: number; y: number };
  readonly color?: number;
  readonly size?: number;
  readonly alpha?: number;
  readonly lifespan?: number;
  readonly text?: string | KoreanText;
  readonly damageAmount?: number;
  readonly vitalPointId?: string;
  readonly statusEffect?: StatusEffect;
  readonly yOffset?: number;
  readonly intensity: number;
  readonly startTime: number;
}

export interface ParticleEffect {
  readonly id: string;
  readonly type: ParticleType;
  readonly position: Position;
  readonly velocity: { x: number; y: number };
  readonly acceleration?: { x: number; y: number };
  readonly color: number;
  readonly size: number;
  readonly lifetime: number;
  readonly fadeOut?: boolean;
  readonly gravity?: number;
}

export interface EnvironmentalEffect {
  readonly id: string;
  readonly type: EnvironmentalEffectType;
  readonly affectedArea: {
    readonly x: number;
    readonly y: number;
    readonly width: number;
    readonly height: number;
  };
  readonly effects: {
    readonly visibilityModifier?: number;
    readonly accuracyModifier?: number;
    readonly movementModifier?: number;
    readonly damageModifier?: number;
  };
  readonly duration: number;
}

export interface VisualEffect {
  readonly id: string;
  readonly type: string;
  readonly duration: number;
  readonly intensity: number;
  readonly position?: Position;
  readonly color?: number;
}

export interface EffectSystem {
  readonly effects: readonly VisualEffect[];
  readonly addEffect: (effect: VisualEffect) => void;
  readonly removeEffect: (id: string) => void;
  readonly updateEffects: (deltaTime: number) => void;
}

export interface DisplayHitEffect extends HitEffect {
  readonly opacity: number;
  readonly scale: number;
  readonly startTime: number;
  readonly displayAlpha: number;
  readonly displayY: number;
  readonly displaySize: number;
}

export interface InputSystemInterface {
  registerAction: (action: string, callback: () => void) => void;
  unregisterAction: (action: string) => void;
  clearActions: () => void;
  isActionActive: (action: string) => boolean;
}

export interface AnimationSystemInterface {
  playAnimation: (entityId: EntityId, animationName: string) => void;
  stopAnimation: (entityId: EntityId, animationName?: string) => void;
  getCurrentFrame: (entityId: EntityId) => AnimationFrame | undefined;
  addAnimation: (config: AnimationConfig) => void;
  getAnimationState: (entityId: EntityId) => AnimationState | undefined;
}

export interface PhysicsSystemInterface {
  addEntity: (entityId: EntityId, config: PhysicsEntityConfig) => void;
  removeEntity: (entityId: EntityId) => void;
  update: (deltaTime: number) => void;
  getEntityState: (entityId: EntityId) => PhysicsEntityState | undefined;
  checkCollision: (
    entityIdA: EntityId,
    entityIdB: EntityId
  ) => CollisionData | null;
  applyForce: (entityId: EntityId, force: Velocity) => void;
}

export interface RenderingSystemInterface {
  readonly app: PixiApplication;
  addRenderable: (entityId: EntityId, config: RenderableConfig) => void;
  removeRenderable: (entityId: EntityId) => void;
  updateRenderable: (
    entityId: EntityId,
    updates: Partial<RenderableConfig>
  ) => void;
  getDisplayObject: (entityId: EntityId) => PixiDisplayObject | undefined;
  render: () => void;
}

export interface SystemEvent {
  readonly type: string;
  readonly timestamp: number;
  readonly source: string;
  readonly data: Record<string, any>;
}

export interface EventBusInterface {
  publish: (event: SystemEvent) => void;
  subscribe: (
    eventType: string,
    callback: (event: SystemEvent) => void
  ) => void;
  unsubscribe: (
    eventType: string,
    callback: (event: SystemEvent) => void
  ) => void;
}

// Define system interfaces without importing (to avoid circular deps)
export interface CombatSystemInterface {
  calculateDamage: (
    technique: any,
    attacker: any,
    defender: any,
    hitResult: any
  ) => {
    baseDamage: number;
    modifierDamage: number;
    totalDamage: number;
    effectsApplied: readonly StatusEffect[];
    finalDefenderState?: any;
  };
  resolveAttack: (
    attacker: any,
    defender: any,
    technique: any,
    targetedVitalPointId?: string
  ) => any;
  applyCombatResult: (
    result: any,
    attacker: any,
    defender: any
  ) => { updatedAttacker: any; updatedDefender: any };
  getAvailableTechniques: (player: any) => readonly any[];
}

export interface VitalPointSystemInterface {
  processHit: (
    targetPosition: Position,
    technique: any,
    baseDamage: number,
    attackerArchetype: any,
    targetDimensions: { width: number; height: number },
    targetedVitalPointId?: string | null
  ) => any;
  calculateHit: (
    technique: any,
    targetVitalPointId: string | null,
    accuracyRoll: number,
    attackerPosition: Position,
    defenderPosition: Position,
    defenderStance: any
  ) => any;
  applyVitalPointEffects: (
    player: any,
    vitalPoint: any,
    intensityMultiplier?: number
  ) => any;
}

export interface TrigramSystemInterface {
  getTechniqueForStance: (stance: any, archetype?: any) => any | undefined;
  calculateStanceEffectiveness: (
    attackerStance: any,
    defenderStance: any,
    technique?: any
  ) => number;
  isValidTransition: (from: any, to: any) => boolean;
  getTransitionCost: (
    from: any,
    to: any,
    player?: any
  ) => { ki: number; stamina: number; timeMs: number };
  recommendStance: (player: any, opponent?: any) => any;
}

export interface GameSystemManager {
  readonly combatSystem: CombatSystemInterface;
  readonly vitalPointSystem: VitalPointSystemInterface;
  readonly trigramSystem: TrigramSystemInterface;
  readonly inputSystem: InputSystemInterface;
  readonly audioSystem: AudioSystemInterface;
  readonly animationSystem?: AnimationSystemInterface;
  readonly physicsSystem?: PhysicsSystemInterface;
  readonly renderingSystem?: RenderingSystemInterface;
  readonly eventBus: EventBusInterface;
  initializeAll: () => Promise<void>;
  updateAll: (deltaTime: number) => void;
}

export interface SystemConfig {
  readonly debugMode?: boolean;
  readonly performanceMonitoring?: boolean;
}

export interface GameSystemState {
  readonly combat: CombatSystemConfig;
  readonly trigram: TrigramSystemConfig;
  readonly vitalPoint: VitalPointSystemConfig;
  readonly ai: AISystemConfig;
}

export interface SystemPerformance {
  readonly fps: number;
  readonly memoryUsage: number;
  readonly renderTime: number;
  readonly updateTime: number;
}

// Fix: Add missing type definitions
export type Timestamp = number;
export type EntityId = string;
export interface Velocity {
  readonly x: number;
  readonly y: number;
}

// Configuration for the VitalPointSystem
// Result from VitalPointSystem's hit calculation - unified with anatomy.ts version
// Combat system interface
// Vital point system interface
// Trigram system interface
// Input system interface
// Gamepad state
export interface GamepadState {
  readonly id: string;
  readonly axes: readonly number[];
  readonly buttons: readonly { pressed: boolean; value: number }[];
}

// Added AnimationFrame and AnimationState for AnimationSystemInterface
export interface AnimationFrame {
  readonly texture: Texture; // Texture from PIXI
  readonly duration: number;
}

export interface AnimationState {
  readonly currentAnimationName?: string;
  readonly currentFrameIndex: number;
  readonly isPlaying: boolean;
  readonly elapsedTimeInFrame: number;
}

// Physics system interface
// Physics entity configuration
export interface PhysicsEntityConfig {
  readonly position: Position;
  readonly velocity?: Velocity;
  readonly mass?: number;
  readonly friction?: number;
  readonly restitution?: number; // Bounciness
  readonly shape:
    | { type: "circle"; radius: number }
    | { type: "rectangle"; width: number; height: number };
  readonly isStatic?: boolean; // Cannot be moved by forces // Added
}

// Added PhysicsEntityState and CollisionData for PhysicsSystemInterface
export interface PhysicsEntityState {
  readonly position: Position;
  readonly velocity: Velocity;
  readonly acceleration?: Velocity;
  readonly angularVelocity?: number;
}

export interface CollisionData {
  readonly entityA: EntityId;
  readonly entityB: EntityId;
  readonly normal: Velocity; // Collision normal vector
  readonly penetration: number; // How much they are overlapping
}

// Rendering system interface
// Renderable configuration
export interface RenderableConfig {
  readonly displayObject: PixiDisplayObject; // The PIXI object to render - use aliased import
  readonly zOrder?: number; // For sorting
  readonly visible?: boolean;
  readonly alpha?: number; // Added
  readonly parent?: EntityId | "stage"; // ID of parent renderable or stage // Added
}

// Game system manager
// System event base type
// Event bus interface for system communication
// General system configuration
// System-specific types for Korean martial arts combat

// Combat system interfaces
export interface CombatSystemConfig {
  readonly damageMultiplier: number;
  readonly criticalChance: number;
  readonly blockEffectiveness: number;
  readonly staminaDrainRate: number;
}

// Trigram system interfaces
export interface TrigramSystemConfig {
  readonly transitionSpeed: number;
  readonly energyCost: number;
  readonly effectivenessMatrix: Record<
    TrigramStance,
    Record<TrigramStance, number>
  >;
}

// Vital point system interfaces
// AI system interfaces
export interface AISystemConfig {
  readonly difficulty: "easy" | "medium" | "hard" | "expert";
  readonly reactionTime: number;
  readonly aggressiveness: number;
  readonly adaptability: number;
}

// Re-export PixiJS types for convenience
export type { PixiApplication, PixiDisplayObject };

// Player archetype data
export const PLAYER_ARCHETYPES_DATA: Record<
  PlayerArchetype,
  PlayerArchetypeData
> = {
  [PlayerArchetype.MUSA]: {
    id: "musa",
    name: { korean: "무사", english: "Warrior" },
    description: {
      korean: "전통 무사의 길",
      english: "Path of the traditional warrior",
    },
    baseHealth: 120,
    baseKi: 100,
    baseStamina: 110,
    coreStance: TrigramStance.GEON,
    theme: {
      primary: KOREAN_COLORS.TRIGRAM_GEON_PRIMARY,
      secondary: KOREAN_COLORS.KOREAN_RED,
    },
    colors: {
      primary: KOREAN_COLORS.TRIGRAM_GEON_PRIMARY,
      secondary: KOREAN_COLORS.KOREAN_RED,
    },
    stats: {
      attackPower: 85,
      defense: 90,
      speed: 70,
      technique: 80,
    },
    favoredStances: [TrigramStance.GEON, TrigramStance.GAN],
    specialAbilities: ["Honor Strike", "Defensive Mastery"],
    philosophy: {
      korean: "명예와 정의의 길",
      english: "The way of honor and justice",
    },
  },

  [PlayerArchetype.AMSALJA]: {
    id: "amsalja",
    name: { korean: "암살자", english: "Assassin" },
    description: {
      korean: "그림자 속의 효율성",
      english: "Efficiency from the shadows",
    },
    baseHealth: 80,
    baseKi: 120,
    baseStamina: 100,
    coreStance: TrigramStance.SON,
    theme: {
      primary: KOREAN_COLORS.TRIGRAM_SON_PRIMARY,
      secondary: KOREAN_COLORS.UI_BACKGROUND_DARK,
    },
    colors: {
      primary: KOREAN_COLORS.TRIGRAM_SON_PRIMARY,
      secondary: KOREAN_COLORS.UI_BACKGROUND_DARK,
    },
    stats: {
      attackPower: 95,
      defense: 60,
      speed: 95,
      technique: 90,
    },
    favoredStances: [TrigramStance.SON, TrigramStance.GAM],
    specialAbilities: ["Shadow Strike", "Vital Point Mastery"],
    philosophy: {
      korean: "침묵과 정확성의 도",
      english: "The way of silence and precision",
    },
  },

  [PlayerArchetype.HACKER]: {
    id: "hacker",
    name: { korean: "해커", english: "Hacker" },
    description: {
      korean: "정보를 통한 힘",
      english: "Power through information",
    },
    baseHealth: 90,
    baseKi: 130,
    baseStamina: 80,
    coreStance: TrigramStance.LI,
    theme: {
      primary: KOREAN_COLORS.PRIMARY_CYAN,
      secondary: KOREAN_COLORS.TRIGRAM_LI_PRIMARY,
    },
    colors: {
      primary: KOREAN_COLORS.PRIMARY_CYAN,
      secondary: KOREAN_COLORS.TRIGRAM_LI_PRIMARY,
    },
    stats: {
      attackPower: 75,
      defense: 70,
      speed: 85,
      technique: 95,
    },
    favoredStances: [TrigramStance.LI, TrigramStance.JIN],
    specialAbilities: ["System Override", "Digital Precision"],
    philosophy: {
      korean: "지식과 기술의 융합",
      english: "The fusion of knowledge and technology",
    },
  },

  [PlayerArchetype.JEONGBO_YOWON]: {
    id: "jeongbo_yowon",
    name: { korean: "정보요원", english: "Agent" },
    description: {
      korean: "관찰을 통한 지식",
      english: "Knowledge through observation",
    },
    baseHealth: 100,
    baseKi: 110,
    baseStamina: 100,
    coreStance: TrigramStance.TAE,
    theme: {
      primary: KOREAN_COLORS.TRIGRAM_TAE_PRIMARY,
      secondary: KOREAN_COLORS.UI_STEEL_GRAY,
    },
    colors: {
      primary: KOREAN_COLORS.TRIGRAM_TAE_PRIMARY,
      secondary: KOREAN_COLORS.UI_STEEL_GRAY,
    },
    stats: {
      attackPower: 80,
      defense: 85,
      speed: 80,
      technique: 85,
    },
    favoredStances: [TrigramStance.TAE, TrigramStance.GAN],
    specialAbilities: ["Intel Gathering", "Adaptive Combat"],
    philosophy: {
      korean: "적응과 전략의 예술",
      english: "The art of adaptation and strategy",
    },
  },

  [PlayerArchetype.JOJIK_POKRYEOKBAE]: {
    id: "jojik_pokryeokbae",
    name: { korean: "조직폭력배", english: "Gangster" },
    description: {
      korean: "무자비함을 통한 생존",
      english: "Survival through ruthlessness",
    },
    baseHealth: 110,
    baseKi: 90,
    baseStamina: 120,
    coreStance: TrigramStance.JIN,
    theme: {
      primary: KOREAN_COLORS.TRIGRAM_JIN_PRIMARY,
      secondary: KOREAN_COLORS.NEGATIVE_RED,
    },
    colors: {
      primary: KOREAN_COLORS.TRIGRAM_JIN_PRIMARY,
      secondary: KOREAN_COLORS.NEGATIVE_RED,
    },
    stats: {
      attackPower: 90,
      defense: 75,
      speed: 75,
      technique: 70,
    },
    favoredStances: [TrigramStance.JIN, TrigramStance.GON],
    specialAbilities: ["Brutal Force", "Street Fighting"],
    philosophy: {
      korean: "강함과 의지의 길",
      english: "The way of strength and will",
    },
  },
} as const;

// Base player stats
export const BASE_PLAYER_STATS = {
  HEALTH: 100,
  KI: 100,
  STAMINA: 100,
  ATTACK_POWER: 75,
  DEFENSE: 75,
  SPEED: 75,
  TECHNIQUE: 75,
} as const;
