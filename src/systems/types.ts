/**
 * Type definitions for systems types
 * Auto-generated by type migration script
 */

// System imports from shared types - avoid circular dependencies
import { AudioSystemInterface, SoundEffectId } from "@/audio";
import { KOREAN_COLORS } from "@/types";
import {
  KoreanText,
  PlayerArchetype,
  Position,
  TrigramStance,
} from "@/types/common";
import type {
  EffectIntensity,
  EnvironmentalEffectType,
  HitEffectType,
  ParticleType,
} from "@/types/effects";

export interface AnimationConfig {
  readonly name: string;
  readonly frames: readonly AnimationFrame[];
  readonly loop?: boolean;
  readonly speed?: number;
}

export interface CombatSystemConfig {
  readonly damageMultiplier: number;
  readonly criticalChance: number;
}

export interface TrigramSystemConfig {
  readonly transitionSpeed: number;
  readonly energyCost: number;
}

export interface AISystemConfig {
  readonly difficulty: "easy" | "medium" | "hard" | "expert";
  readonly reactionTime: number;
}

export interface VitalPointSystemConfig {
  readonly precisionRequired: number;
  readonly damageMultipliers: Record<string, number>;
  readonly effectDurations: Record<string, number>;
}

// Direct PixiJS imports for core types
import type {
  Application as PixiApplication,
  DisplayObject as PixiDisplayObject,
  Texture,
} from "pixi.js";
import { PlayerArchetypeData } from "./vitalpoint";

export interface AnimationState {
  readonly currentAnimationName?: string;
  readonly currentFrameIndex: number;
  readonly isPlaying: boolean;
  readonly elapsedTimeInFrame: number;
}

export interface CollisionData {
  readonly entityA: EntityId;
  readonly entityB: EntityId;
  readonly normal: Velocity;
  readonly penetration: number;
}

export interface PhysicsEntityConfig {
  readonly position: Position;
  readonly velocity?: Velocity;
  readonly mass?: number;
  readonly friction?: number;
  readonly restitution?: number;
  readonly shape:
    | { type: "circle"; radius: number }
    | { type: "rectangle"; width: number; height: number };
  readonly isStatic?: boolean;
}

export interface PhysicsEntityState {
  readonly position: Position;
  readonly velocity: Velocity;
  readonly acceleration?: Velocity;
  readonly angularVelocity?: number;
}

export interface RenderableConfig {
  readonly displayObject: PixiDisplayObject;
  readonly zOrder?: number;
  readonly visible?: boolean;
  readonly alpha?: number;
  readonly parent?: EntityId | "stage";
}

export interface StatusEffect {
  readonly id: string;
  readonly type: string;
  readonly intensity: EffectIntensity;
  readonly duration: number;
  readonly description: KoreanText;
  readonly stackable: boolean;
  readonly source: string;
  readonly startTime: number;
  readonly endTime: number;
}

export interface HitEffect {
  readonly id: string;
  readonly type: HitEffectType;
  readonly attackerId: string;
  readonly defenderId: string;
  readonly timestamp: number;
  readonly duration: number;
  readonly position?: Position;
  readonly velocity?: { x: number; y: number };
  readonly color?: number;
  readonly size?: number;
  readonly alpha?: number;
  readonly lifespan?: number;
  readonly text?: string | KoreanText;
  readonly damageAmount?: number;
  readonly vitalPointId?: string;
  readonly statusEffect?: StatusEffect;
  readonly yOffset?: number;
  readonly intensity: number;
  readonly startTime: number;
}

export interface ParticleEffect {
  readonly id: string;
  readonly type: ParticleType;
  readonly position: Position;
  readonly velocity: { x: number; y: number };
  readonly acceleration?: { x: number; y: number };
  readonly color: number;
  readonly size: number;
  readonly lifetime: number;
  readonly fadeOut?: boolean;
  readonly gravity?: number;
}

export interface EnvironmentalEffect {
  readonly id: string;
  readonly type: EnvironmentalEffectType;
  readonly affectedArea: {
    readonly x: number;
    readonly y: number;
    readonly width: number;
    readonly height: number;
  };
  readonly effects: {
    readonly visibilityModifier?: number;
    readonly accuracyModifier?: number;
    readonly movementModifier?: number;
    readonly damageModifier?: number;
  };
  readonly duration: number;
}

export interface VisualEffect {
  readonly id: string;
  readonly type: string;
  readonly duration: number;
  readonly intensity: number;
  readonly position?: Position;
  readonly color?: number;
}

export interface EffectSystem {
  readonly effects: readonly VisualEffect[];
  readonly addEffect: (effect: VisualEffect) => void;
  readonly removeEffect: (id: string) => void;
  readonly updateEffects: (deltaTime: number) => void;
}

export interface DisplayHitEffect extends HitEffect {
  readonly opacity: number;
  readonly scale: number;
  readonly startTime: number;
  readonly displayAlpha: number;
  readonly displayY: number;
  readonly displaySize: number;
}

export interface InputSystemInterface {
  registerAction: (action: string, callback: () => void) => void;
  unregisterAction: (action: string) => void;
  clearActions: () => void;
  isActionActive: (action: string) => boolean;
}

export interface AnimationSystemInterface {
  playAnimation: (entityId: EntityId, animationName: string) => void;
  stopAnimation: (entityId: EntityId, animationName?: string) => void;
  getCurrentFrame: (entityId: EntityId) => AnimationFrame | undefined;
  addAnimation: (config: AnimationConfig) => void;
  getAnimationState: (entityId: EntityId) => AnimationState | undefined;
}

export interface PhysicsSystemInterface {
  addEntity: (entityId: EntityId, config: PhysicsEntityConfig) => void;
  removeEntity: (entityId: EntityId) => void;
  update: (deltaTime: number) => void;
  getEntityState: (entityId: EntityId) => PhysicsEntityState | undefined;
  checkCollision: (
    entityIdA: EntityId,
    entityIdB: EntityId
  ) => CollisionData | null;
  applyForce: (entityId: EntityId, force: Velocity) => void;
}

export interface RenderingSystemInterface {
  readonly app: PixiApplication;
  addRenderable: (entityId: EntityId, config: RenderableConfig) => void;
  removeRenderable: (entityId: EntityId) => void;
  updateRenderable: (
    entityId: EntityId,
    updates: Partial<RenderableConfig>
  ) => void;
  getDisplayObject: (entityId: EntityId) => PixiDisplayObject | undefined;
  render: () => void;
}

export interface SystemEvent {
  readonly type: string;
  readonly timestamp: number;
  readonly source: string;
  readonly data: Record<string, any>;
}

export interface EventBusInterface {
  publish: (event: SystemEvent) => void;
  subscribe: (
    eventType: string,
    callback: (event: SystemEvent) => void
  ) => void;
  unsubscribe: (
    eventType: string,
    callback: (event: SystemEvent) => void
  ) => void;
}

// Define system interfaces without importing (to avoid circular deps)
export interface CombatSystemInterface {
  calculateDamage: (
    technique: any,
    attacker: any,
    defender: any,
    hitResult: any
  ) => {
    baseDamage: number;
    modifierDamage: number;
    totalDamage: number;
    effectsApplied: readonly StatusEffect[];
    finalDefenderState?: any;
  };
  resolveAttack: (
    attacker: any,
    defender: any,
    technique: any,
    targetedVitalPointId?: string
  ) => any;
  applyCombatResult: (
    result: any,
    attacker: any,
    defender: any
  ) => { updatedAttacker: any; updatedDefender: any };
  getAvailableTechniques: (player: any) => readonly any[];
}

export interface VitalPointSystemInterface {
  processHit: (
    targetPosition: Position,
    technique: any,
    baseDamage: number,
    attackerArchetype: any,
    targetDimensions: { width: number; height: number },
    targetedVitalPointId?: string | null
  ) => any;
  calculateHit: (
    technique: any,
    targetVitalPointId: string | null,
    accuracyRoll: number,
    attackerPosition: Position,
    defenderPosition: Position,
    defenderStance: any
  ) => any;
  applyVitalPointEffects: (
    player: any,
    vitalPoint: any,
    intensityMultiplier?: number
  ) => any;
}

export interface TrigramSystemInterface {
  getTechniqueForStance: (stance: any, archetype?: any) => any | undefined;
  calculateStanceEffectiveness: (
    attackerStance: any,
    defenderStance: any,
    technique?: any
  ) => number;
  isValidTransition: (from: any, to: any) => boolean;
  getTransitionCost: (
    from: any,
    to: any,
    player?: any
  ) => { ki: number; stamina: number; timeMs: number };
  recommendStance: (player: any, opponent?: any) => any;
}

export interface GameSystemManager {
  readonly combatSystem: CombatSystemInterface;
  readonly vitalPointSystem: VitalPointSystemInterface;
  readonly trigramSystem: TrigramSystemInterface;
  readonly inputSystem: InputSystemInterface;
  readonly audioSystem: AudioSystemInterface;
  readonly animationSystem?: AnimationSystemInterface;
  readonly physicsSystem?: PhysicsSystemInterface;
  readonly renderingSystem?: RenderingSystemInterface;
  readonly eventBus: EventBusInterface;
  initializeAll: () => Promise<void>;
  updateAll: (deltaTime: number) => void;
}

export interface SystemConfig {
  readonly debugMode?: boolean;
  readonly performanceMonitoring?: boolean;
}

export interface GameSystemState {
  readonly combat: CombatSystemConfig;
  readonly trigram: TrigramSystemConfig;
  readonly vitalPoint: VitalPointSystemConfig;
  readonly ai: AISystemConfig;
}

export interface SystemPerformance {
  readonly fps: number;
  readonly memoryUsage: number;
  readonly renderTime: number;
  readonly updateTime: number;
}

// Fix: Add missing type definitions
export type Timestamp = number;
export type EntityId = string;
export interface Velocity {
  readonly x: number;
  readonly y: number;
}

// Configuration for the VitalPointSystem
// Result from VitalPointSystem's hit calculation - unified with anatomy.ts version
// Combat system interface
// Vital point system interface
// Trigram system interface
// Input system interface
// Gamepad state
export interface GamepadState {
  readonly id: string;
  readonly axes: readonly number[];
  readonly buttons: readonly { pressed: boolean; value: number }[];
}

// Added AnimationFrame and AnimationState for AnimationSystemInterface
export interface AnimationFrame {
  readonly texture: Texture; // Texture from PIXI
  readonly duration: number;
}

export interface AnimationState {
  readonly currentAnimationName?: string;
  readonly currentFrameIndex: number;
  readonly isPlaying: boolean;
  readonly elapsedTimeInFrame: number;
}

// Physics system interface
// Physics entity configuration
export interface PhysicsEntityConfig {
  readonly position: Position;
  readonly velocity?: Velocity;
  readonly mass?: number;
  readonly friction?: number;
  readonly restitution?: number; // Bounciness
  readonly shape:
    | { type: "circle"; radius: number }
    | { type: "rectangle"; width: number; height: number };
  readonly isStatic?: boolean; // Cannot be moved by forces // Added
}

// Added PhysicsEntityState and CollisionData for PhysicsSystemInterface
export interface PhysicsEntityState {
  readonly position: Position;
  readonly velocity: Velocity;
  readonly acceleration?: Velocity;
  readonly angularVelocity?: number;
}

export interface CollisionData {
  readonly entityA: EntityId;
  readonly entityB: EntityId;
  readonly normal: Velocity; // Collision normal vector
  readonly penetration: number; // How much they are overlapping
}

// Rendering system interface
// Renderable configuration
export interface RenderableConfig {
  readonly displayObject: PixiDisplayObject; // The PIXI object to render - use aliased import
  readonly zOrder?: number; // For sorting
  readonly visible?: boolean;
  readonly alpha?: number; // Added
  readonly parent?: EntityId | "stage"; // ID of parent renderable or stage // Added
}

// Game system manager
// System event base type
// Event bus interface for system communication
// General system configuration
// System-specific types for Korean martial arts combat

// Combat system interfaces
export interface CombatSystemConfig {
  readonly damageMultiplier: number;
  readonly criticalChance: number;
  readonly blockEffectiveness: number;
  readonly staminaDrainRate: number;
}

// Trigram system interfaces
export interface TrigramSystemConfig {
  readonly transitionSpeed: number;
  readonly energyCost: number;
  readonly effectivenessMatrix: Record<
    TrigramStance,
    Record<TrigramStance, number>
  >;
}

// Vital point system interfaces
// AI system interfaces
export interface AISystemConfig {
  readonly difficulty: "easy" | "medium" | "hard" | "expert";
  readonly reactionTime: number;
  readonly aggressiveness: number;
  readonly adaptability: number;
}

// Re-export PixiJS types for convenience
export type { PixiApplication, PixiDisplayObject };

// Player archetype data
export const PLAYER_ARCHETYPES_DATA: Record<
  PlayerArchetype,
  PlayerArchetypeData
> = {
  [PlayerArchetype.MUSA]: {
    id: "musa",
    name: { korean: "무사", english: "Warrior" },
    description: {
      korean: "전통 무사의 길",
      english: "Path of the traditional warrior",
    },
    baseHealth: 120,
    baseKi: 100,
    baseStamina: 110,
    coreStance: TrigramStance.GEON,
    theme: {
      primary: KOREAN_COLORS.TRIGRAM_GEON_PRIMARY,
      secondary: KOREAN_COLORS.KOREAN_RED,
    },
    colors: {
      primary: KOREAN_COLORS.TRIGRAM_GEON_PRIMARY,
      secondary: KOREAN_COLORS.KOREAN_RED,
    },
    stats: {
      attackPower: 85,
      defense: 90,
      speed: 70,
      technique: 80,
    },
    favoredStances: [TrigramStance.GEON, TrigramStance.GAN],
    specialAbilities: ["Honor Strike", "Defensive Mastery"],
    philosophy: {
      korean: "명예와 정의의 길",
      english: "The way of honor and justice",
    },
  },

  [PlayerArchetype.AMSALJA]: {
    id: "amsalja",
    name: { korean: "암살자", english: "Assassin" },
    description: {
      korean: "그림자 속의 효율성",
      english: "Efficiency from the shadows",
    },
    baseHealth: 80,
    baseKi: 120,
    baseStamina: 100,
    coreStance: TrigramStance.SON,
    theme: {
      primary: KOREAN_COLORS.TRIGRAM_SON_PRIMARY,
      secondary: KOREAN_COLORS.UI_BACKGROUND_DARK,
    },
    colors: {
      primary: KOREAN_COLORS.TRIGRAM_SON_PRIMARY,
      secondary: KOREAN_COLORS.UI_BACKGROUND_DARK,
    },
    stats: {
      attackPower: 95,
      defense: 60,
      speed: 95,
      technique: 90,
    },
    favoredStances: [TrigramStance.SON, TrigramStance.GAM],
    specialAbilities: ["Shadow Strike", "Vital Point Mastery"],
    philosophy: {
      korean: "침묵과 정확성의 도",
      english: "The way of silence and precision",
    },
  },

  [PlayerArchetype.HACKER]: {
    id: "hacker",
    name: { korean: "해커", english: "Hacker" },
    description: {
      korean: "정보를 통한 힘",
      english: "Power through information",
    },
    baseHealth: 90,
    baseKi: 130,
    baseStamina: 80,
    coreStance: TrigramStance.LI,
    theme: {
      primary: KOREAN_COLORS.PRIMARY_CYAN,
      secondary: KOREAN_COLORS.TRIGRAM_LI_PRIMARY,
    },
    colors: {
      primary: KOREAN_COLORS.PRIMARY_CYAN,
      secondary: KOREAN_COLORS.TRIGRAM_LI_PRIMARY,
    },
    stats: {
      attackPower: 75,
      defense: 70,
      speed: 85,
      technique: 95,
    },
    favoredStances: [TrigramStance.LI, TrigramStance.JIN],
    specialAbilities: ["System Override", "Digital Precision"],
    philosophy: {
      korean: "지식과 기술의 융합",
      english: "The fusion of knowledge and technology",
    },
  },

  [PlayerArchetype.JEONGBO_YOWON]: {
    id: "jeongbo_yowon",
    name: { korean: "정보요원", english: "Agent" },
    description: {
      korean: "관찰을 통한 지식",
      english: "Knowledge through observation",
    },
    baseHealth: 100,
    baseKi: 110,
    baseStamina: 100,
    coreStance: TrigramStance.TAE,
    theme: {
      primary: KOREAN_COLORS.TRIGRAM_TAE_PRIMARY,
      secondary: KOREAN_COLORS.UI_STEEL_GRAY,
    },
    colors: {
      primary: KOREAN_COLORS.TRIGRAM_TAE_PRIMARY,
      secondary: KOREAN_COLORS.UI_STEEL_GRAY,
    },
    stats: {
      attackPower: 80,
      defense: 85,
      speed: 80,
      technique: 85,
    },
    favoredStances: [TrigramStance.TAE, TrigramStance.GAN],
    specialAbilities: ["Intel Gathering", "Adaptive Combat"],
    philosophy: {
      korean: "적응과 전략의 예술",
      english: "The art of adaptation and strategy",
    },
  },

  [PlayerArchetype.JOJIK_POKRYEOKBAE]: {
    id: "jojik_pokryeokbae",
    name: { korean: "조직폭력배", english: "Gangster" },
    description: {
      korean: "무자비함을 통한 생존",
      english: "Survival through ruthlessness",
    },
    baseHealth: 110,
    baseKi: 90,
    baseStamina: 120,
    coreStance: TrigramStance.JIN,
    theme: {
      primary: KOREAN_COLORS.TRIGRAM_JIN_PRIMARY,
      secondary: KOREAN_COLORS.NEGATIVE_RED,
    },
    colors: {
      primary: KOREAN_COLORS.TRIGRAM_JIN_PRIMARY,
      secondary: KOREAN_COLORS.NEGATIVE_RED,
    },
    stats: {
      attackPower: 90,
      defense: 75,
      speed: 75,
      technique: 70,
    },
    favoredStances: [TrigramStance.JIN, TrigramStance.GON],
    specialAbilities: ["Brutal Force", "Street Fighting"],
    philosophy: {
      korean: "강함과 의지의 길",
      english: "The way of strength and will",
    },
  },
} as const;

// Base player stats
export const BASE_PLAYER_STATS = {
  HEALTH: 100,
  KI: 100,
  STAMINA: 100,
  ATTACK_POWER: 75,
  DEFENSE: 75,
  SPEED: 75,
  TECHNIQUE: 75,
} as const;

// Combat configuration
export const COMBAT_CONFIG = {
  MAX_HEALTH: 100,
  MAX_KI: 100,
  MAX_STAMINA: 100,
  MAX_BALANCE: 100,
  MAX_CONSCIOUSNESS: 100,

  // Damage multipliers
  CRITICAL_HIT_MULTIPLIER: 2.0,
  VITAL_POINT_MULTIPLIER: 1.5,
  COUNTER_ATTACK_MULTIPLIER: 1.3,

  // Status thresholds
  LOW_HEALTH_THRESHOLD: 25,
  CRITICAL_HEALTH_THRESHOLD: 10,
  UNCONSCIOUS_THRESHOLD: 0,
  STAMINA_EXHAUSTED_THRESHOLD: 0,

  // Recovery rates (per second)
  STAMINA_RECOVERY_RATE: 10,
  KI_RECOVERY_RATE: 5,
  BALANCE_RECOVERY_RATE: 15,
  CONSCIOUSNESS_RECOVERY_RATE: 2,

  // Combat timing (milliseconds)
  TECHNIQUE_COOLDOWN: 500,
  STANCE_CHANGE_COOLDOWN: 200,
  BLOCK_DURATION: 300,
  RECOVERY_TIME: 400,
} as const;

// Enhanced damage calculation constants
export const ENHANCED_DAMAGE_CONSTANTS = {
  BASE_DAMAGE: 10,
  CRITICAL_MULTIPLIER: 2.0,
  VITAL_POINT_MULTIPLIER: 1.5,
  ARMOR_REDUCTION: 0.1,
  STANCE_DEFENSE_BONUS: 0.2,
  BALANCE_IMPACT_MULTIPLIER: 0.3,
  CONSCIOUSNESS_THRESHOLD: 30,
  PAIN_THRESHOLD: 80,

  // New damage factors
  TECHNIQUE_POWER_MODIFIER: 0.2,
  ARCHETYPE_BONUS: 0.15,
  COMBO_MULTIPLIER: 1.2,
  PERFECT_TIMING_BONUS: 0.3,
  BASE_CRIT_CHANCE: 0.1, // Added: Base critical hit chance (e.g., 10%)
} as const;

// Combat system constants for Korean martial arts

export const COMBAT_CONSTANTS = {
  // Damage calculation
  BASE_DAMAGE: 10,
  CRITICAL_MULTIPLIER: 2.0,
  VITAL_POINT_MULTIPLIER: 1.5,

  // Status thresholds
  LOW_HEALTH_THRESHOLD: 30,
  CRITICAL_HEALTH_THRESHOLD: 15,
  EXHAUSTED_STAMINA_THRESHOLD: 20,

  // Recovery rates (per second)
  STAMINA_RECOVERY_RATE: 5,
  KI_RECOVERY_RATE: 3,
  CONSCIOUSNESS_RECOVERY_RATE: 2,

  // Combat timing
  ATTACK_COOLDOWN: 500, // milliseconds
  STANCE_CHANGE_COOLDOWN: 300,
  BLOCK_WINDOW: 200,

  // Balance and momentum
  BALANCE_RECOVERY_RATE: 10,
  MOMENTUM_DECAY_RATE: 5,

  // Pain and status effects
  PAIN_DECAY_RATE: 3,
  STATUS_EFFECT_DURATION: 3000,
} as const;

// Combat controls mapping
export const COMBAT_CONTROLS = {
  // Trigram stance system (1-8 keys)
  stanceControls: {
    "1": {
      stance: "geon" as TrigramStance,
      korean: "건",
      technique: "천둥벽력",
    },
    "2": {
      stance: "tae" as TrigramStance,
      korean: "태",
      technique: "유수연타",
    },
    "3": { stance: "li" as TrigramStance, korean: "리", technique: "화염지창" },
    "4": {
      stance: "jin" as TrigramStance,
      korean: "진",
      technique: "벽력일섬",
    },
    "5": {
      stance: "son" as TrigramStance,
      korean: "손",
      technique: "선풍연격",
    },
    "6": {
      stance: "gam" as TrigramStance,
      korean: "감",
      technique: "수류반격",
    },
    "7": {
      stance: "gan" as TrigramStance,
      korean: "간",
      technique: "반석방어",
    },
    "8": {
      stance: "gon" as TrigramStance,
      korean: "곤",
      technique: "대지포옹",
    },
  },

  // Movement controls
  movement: {
    WASD: "Tactical positioning and footwork",
    ArrowKeys: "Alternative movement system",
  },

  // Combat actions
  combat: {
    SPACE: "Execute current stance technique",
    SHIFT: "Defensive guard/block position",
    CTRL: "Precision vital point targeting mode",
    TAB: "Cycle through player archetypes",
  },

  // System controls
  system: {
    ESC: "Pause menu / Return to intro",
    F1: "Help / Controls guide",
    M: "Mute / Audio settings",
  },
} as const;

// Damage types
export const DAMAGE_TYPES = {
  PHYSICAL: "physical",
  ENERGY: "energy",
  VITAL_POINT: "vital_point",
  PSYCHOLOGICAL: "psychological",
} as const;

// Combat phases
export const COMBAT_PHASES = {
  PREPARATION: "preparation",
  ENGAGEMENT: "engagement",
  EXECUTION: "execution",
  RECOVERY: "recovery",
  RESOLUTION: "resolution",
} as const;

// Combat audio mapping
export const COMBAT_AUDIO_MAP: Record<string, SoundEffectId> = {
  light_attack: "attack_light",
  medium_attack: "attack_medium",
  heavy_attack: "attack_heavy",
  critical_attack: "attack_critical",

  light_hit: "hit_light",
  medium_hit: "hit_medium",
  heavy_hit: "hit_heavy",
  critical_hit: "critical_hit",

  block: "block_success",
  guard_break: "block_break",
  miss: "miss",

  stance_change: "stance_change",
  technique: "technique_execute",

  match_start: "match_start",
  combat_end: "combat_end",
  victory: "victory",
  defeat: "defeat",

  guard: "guard",
} as const;

// Combat state transitions
export const COMBAT_STATE_MACHINE = {
  idle: {
    canTransitionTo: ["attacking", "defending", "moving", "stunned"],
    duration: Infinity,
  },
  attacking: {
    canTransitionTo: ["idle", "recovering", "stunned"],
    duration: 500,
  },
  defending: {
    canTransitionTo: ["idle", "attacking", "stunned"],
    duration: 300,
  },
  moving: {
    canTransitionTo: ["idle", "attacking", "defending"],
    duration: 200,
  },
  stunned: {
    canTransitionTo: ["idle"],
    duration: 1000,
  },
  recovering: {
    canTransitionTo: ["idle"],
    duration: 400,
  },
  unconscious: {
    canTransitionTo: ["idle"],
    duration: 5000,
  },
} as const;

// Training-specific combat constants
export const TRAINING_COMBAT_SETTINGS = {
  techniqueCooldown: 500,
  perfectStrikeThreshold: 0.7,
  maxTrainingSession: 300000, // 5 minutes
  kiRegenerationRate: 2,
  staminaRegenerationRate: 1.5,
} as const;

// Combat state transitions for training mode
export const TRAINING_STATE_MACHINE = {
  practicing: {
    canTransitionTo: ["idle", "executing", "recovering"],
    duration: Infinity,
  },
  executing: {
    canTransitionTo: ["practicing", "idle"],
    duration: 800,
  },
  recovering: {
    canTransitionTo: ["practicing", "idle"],
    duration: 300,
  },
} as const;

// Technique execution results
export const TECHNIQUE_RESULTS = {
  SUCCESS: "success",
  BLOCKED: "blocked",
  MISSED: "missed",
  COUNTERED: "countered",
  INTERRUPTED: "interrupted",
} as const;

// Combat effectiveness modifiers
export const EFFECTIVENESS_MODIFIERS = {
  stance_advantage: 1.2,
  stance_disadvantage: 0.8,
  counter_attack: 1.5,
  perfect_timing: 1.3,
  off_balance: 0.7,
  fatigued: 0.6,
  focused: 1.1,
} as const;

// Combat resource costs
export const RESOURCE_COSTS = {
  KI: {
    BASIC_TECHNIQUE: 5,
    ADVANCED_TECHNIQUE: 10,
    SPECIAL_TECHNIQUE: 15,
    ULTIMATE_TECHNIQUE: 25,
  },
  STAMINA: {
    BASIC_ATTACK: 8,
    HEAVY_ATTACK: 15,
    BLOCK: 5,
    DODGE: 10,
    STANCE_CHANGE: 12,
  },
} as const;

// Hit detection constants
export const HIT_DETECTION = {
  PRECISION_THRESHOLD: 0.8,
  VITAL_POINT_THRESHOLD: 0.9,
  BASE_ACCURACY: 0.7,
  MAX_ACCURACY: 0.95,

  // Hit boxes
  PLAYER_HITBOX_WIDTH: 60,
  PLAYER_HITBOX_HEIGHT: 180,
  VITAL_POINT_RADIUS: 15,
} as const;

// Status effect durations
export const STATUS_DURATIONS = {
  STUN: 1500,
  POISON: 5000,
  BURN: 3000,
  BLEED: 4000,
  WEAKNESS: 6000,
  STRENGTH_BUFF: 8000,
} as const;

export interface CombatControlsConfig {
  readonly stanceControls: Record<
    string,
    { stance: string; korean: string; technique: string }
  >;
  readonly movement: Record<string, string>;
  readonly combat: Record<string, string>;
  readonly system: Record<string, string>;
}

// Key mapping for easier lookup
export const KEYBOARD_MAPPING = {
  // Stance keys
  STANCE_1: "1",
  STANCE_2: "2",
  STANCE_3: "3",
  STANCE_4: "4",
  STANCE_5: "5",
  STANCE_6: "6",
  STANCE_7: "7",
  STANCE_8: "8",

  // Combat actions
  EXECUTE_TECHNIQUE: " ", // Space
  BLOCK: "Shift",
  TARGET_MODE: "Control",
  ARCHETYPE_CYCLE: "Tab",

  // Movement
  MOVE_UP: "w",
  MOVE_DOWN: "s",
  MOVE_LEFT: "a",
  MOVE_RIGHT: "d",

  // System
  PAUSE: "Escape",
  HELP: "F1",
  MUTE: "m",
} as const;

/**
 * Get the stance associated with a given key.
 *
 * @param key - The key to lookup.
 * @returns The corresponding stance, or null if not found.
 */
export function getStanceFromKey(key: string): TrigramStance | null {
  const stanceMap: Record<string, TrigramStance> = {
    "1": TrigramStance.GEON,
    "2": TrigramStance.TAE,
    "3": TrigramStance.LI,
    "4": TrigramStance.JIN,
    "5": TrigramStance.SON,
    "6": TrigramStance.GAM,
    "7": TrigramStance.GAN,
    "8": TrigramStance.GON,
  };
  return stanceMap[key] || null;
}

export interface CombatControlsConfig {
  readonly stanceControls: Record<
    string,
    { stance: string; korean: string; technique: string }
  >;
  readonly movement: Record<string, string>;
  readonly combat: Record<string, string>;
  readonly system: Record<string, string>;
}

// Input handling types
export interface InputEvent {
  readonly type: "keydown" | "keyup" | "pointerdown" | "pointerup";
  readonly key?: string;
  readonly position?: { x: number; y: number };
  readonly timestamp: number;
}

export interface CombatInput {
  readonly player: number;
  readonly action: string;
  readonly data?: any;
}

// Gesture types
export interface Gesture {
  readonly type: "tap" | "hold" | "swipe" | "combo";
  readonly duration?: number;
  readonly direction?: "up" | "down" | "left" | "right";
  readonly sequence?: string[];
}

export const DEFAULT_GAME_SPEED = 1.0;

/**
 * Core game configuration constants for Black Trigram
 */

// Game configuration
export const GAME_CONFIG = {
  // Canvas dimensions
  CANVAS_WIDTH: 1200,
  CANVAS_HEIGHT: 800,
  TARGET_FPS: 60,
  MIN_FPS: 30,

  // Combat settings
  ROUND_DURATION: 180, // seconds
  MAX_ROUNDS: 3,
  KO_THRESHOLD: 0,

  // Player settings
  BASE_HEALTH: 100,
  BASE_KI: 100,
  BASE_STAMINA: 100,

  // Player positions
  PLAYER_START_POS_X_1: 300,
  PLAYER_START_POS_X_2: 900,
  PLAYER_START_POS_Y: 400,

  // Physics
  GRAVITY: 9.8,
  FRICTION: 0.85,

  // UI settings
  UI_PADDING: 20,
  BUTTON_HEIGHT: 50,

  // Audio settings
  MASTER_VOLUME: 1.0,
  MUSIC_VOLUME: 0.7,
  SFX_VOLUME: 0.8,

  // Debug settings
  DEBUG_MODE: false,
  SHOW_HITBOXES: false,
  SHOW_VITAL_POINTS: false,
} as const;

// Add missing player colors
export const PLAYER_COLORS = {
  PLAYER_1_COLOR: 0x0099ff, // Blue
  PLAYER_2_COLOR: 0xff9900, // Orange
} as const;

// Difficulty settings
export const DIFFICULTY_SETTINGS = {
  BEGINNER: {
    AI_REACTION_TIME: 800,
    DAMAGE_MULTIPLIER: 0.7,
    TECHNIQUE_SUCCESS_RATE: 0.6,
  },
  INTERMEDIATE: {
    AI_REACTION_TIME: 600,
    DAMAGE_MULTIPLIER: 1.0,
    TECHNIQUE_SUCCESS_RATE: 0.8,
  },
  EXPERT: {
    AI_REACTION_TIME: 400,
    DAMAGE_MULTIPLIER: 1.3,
    TECHNIQUE_SUCCESS_RATE: 0.9,
  },
  MASTER: {
    AI_REACTION_TIME: 200,
    DAMAGE_MULTIPLIER: 1.5,
    TECHNIQUE_SUCCESS_RATE: 0.95,
  },
} as const;

// Game phases
export const GAME_PHASES = {
  INTRO: "intro",
  TRAINING: "training",
  COMBAT: "combat",
  VICTORY: "victory",
  DEFEAT: "defeat",
} as const;

// Game version and metadata
export const GAME_METADATA = {
  VERSION: "1.0.0",
  BUILD: "2024.1",
  TITLE: "흑괘 (Black Trigram)",
  SUBTITLE: "Korean Martial Arts Combat Simulator",
  DEVELOPER: "Black Trigram Team",
  COPYRIGHT: "© 2024 Black Trigram",
} as const;

// Performance thresholds
export const PERFORMANCE_THRESHOLDS = {
  TARGET_FPS: 60,
  MIN_FPS: 30,
  FRAME_TIME_WARNING: 20, // ms
  MEMORY_WARNING: 100, // MB
  GARBAGE_COLLECTION_THRESHOLD: 50, // MB
} as const;

// Combat timing constants
export const COMBAT_TIMING = {
  ATTACK_WINDOW: 500, // ms
  DEFENSE_WINDOW: 300, // ms
  RECOVERY_TIME: 200, // ms
  COUNTER_WINDOW: 150, // ms
} as const;

// Damage calculation constants
export const DAMAGE_CONSTANTS = {
  BASE_DAMAGE: 10,
  CRITICAL_MULTIPLIER: 2.0,
  VITAL_POINT_MULTIPLIER: 1.5,
  ARMOR_REDUCTION: 0.1,
  STANCE_DEFENSE_BONUS: 0.2,
  BALANCE_IMPACT_MULTIPLIER: 0.3,
  CONSCIOUSNESS_THRESHOLD: 30,
  PAIN_THRESHOLD: 80,
  BASE_CRIT_CHANCE: 0.1, // Added: Base critical hit chance (e.g., 10%)
  TECHNIQUE_ACCURACY_MODIFIER: 1.0, // Added
  STANCE_EFFECTIVENESS_RANGE: { MIN: 0.5, MAX: 1.5 }, // Added
  PERFECT_TIMING_BONUS: 0.3, // Added
} as const;

// Animation timings
export const ANIMATION_TIMINGS = {
  STANCE_TRANSITION: 300,
  TECHNIQUE_STARTUP: 150,
  TECHNIQUE_ACTIVE: 100,
  TECHNIQUE_RECOVERY: 250,
  HIT_STUN: 200,
  BLOCK_STUN: 100,
  KNOCKDOWN_RECOVERY: 1000,
} as const;

// UI Layout constants
export const UI_LAYOUT = {
  HUD_HEIGHT: 80,
  CONTROLS_HEIGHT: 120,
  SIDEBAR_WIDTH: 200,
  MARGIN: 20,
  BUTTON_HEIGHT: 50,
  BUTTON_WIDTH: 150,
} as const;

// Audio volume defaults
export const AUDIO_DEFAULTS = {
  MASTER_VOLUME: 0.7,
  SFX_VOLUME: 0.8,
  MUSIC_VOLUME: 0.5,
  AMBIENT_VOLUME: 0.3,
} as const;

// Calculated constants based on GAME_CONFIG
export const HALF_CANVAS_WIDTH = GAME_CONFIG.CANVAS_WIDTH / 2;
export const HALF_CANVAS_HEIGHT = GAME_CONFIG.CANVAS_HEIGHT / 2;
export const CANVAS_ASPECT_RATIO =
  GAME_CONFIG.CANVAS_WIDTH / GAME_CONFIG.CANVAS_HEIGHT;
export const FRAME_TIME = 1000 / GAME_CONFIG.TARGET_FPS;
export const TICK_RATE = GAME_CONFIG.TARGET_FPS;

// Player distance calculations
export const PLAYER_DISTANCE =
  GAME_CONFIG.PLAYER_START_POS_X_2 - GAME_CONFIG.PLAYER_START_POS_X_1;
export const CENTER_POSITION_X =
  (GAME_CONFIG.PLAYER_START_POS_X_1 + GAME_CONFIG.PLAYER_START_POS_X_2) / 2;

// Combat ranges
export const COMBAT_RANGES = {
  MELEE_RANGE: 80,
  CLOSE_RANGE: 120,
  MEDIUM_RANGE: 200,
  LONG_RANGE: 300,
  MAX_RANGE: PLAYER_DISTANCE,
} as const;

// Game state constants
export const GAME_STATES = {
  LOADING: "loading",
  MENU: "menu",
  CHARACTER_SELECT: "character_select",
  TRAINING: "training",
  COMBAT: "combat",
  PAUSED: "paused",
  GAME_OVER: "game_over",
} as const;

// Input constants
export const INPUT_CONSTANTS = {
  DOUBLE_TAP_TIME: 300, // ms
  HOLD_THRESHOLD: 500, // ms
  GESTURE_TIMEOUT: 1000, // ms
  COMBO_TIMEOUT: 2000, // ms
} as const;

// Visual effect constants
export const VISUAL_EFFECTS = {
  HIT_FLASH_DURATION: 100,
  SCREEN_SHAKE_INTENSITY: 5,
  PARTICLE_LIFETIME: 1000,
  GLOW_PULSE_SPEED: 2,
  STANCE_GLOW_OPACITY: 0.3,
} as const;

// Training mode constants
export const TRAINING_CONFIG = {
  DUMMY_HEALTH: 1000,
  AUTO_RESET_TIME: 5000, // ms
  SHOW_FRAME_DATA: true,
  SHOW_HITBOXES: true,
  INFINITE_KI: true,
  INFINITE_STAMINA: true,
} as const;

// Game mode configurations
export const GAME_MODE_CONFIG = {
  VERSUS: {
    allowPause: true,
    timeLimit: 180,
    rounds: 3,
    enableAI: false,
  },
  TRAINING: {
    allowPause: true,
    timeLimit: null,
    rounds: 1,
    enableAI: true,
    infiniteResources: true,
  },
  PRACTICE: {
    allowPause: true,
    timeLimit: null,
    rounds: 1,
    enableAI: false,
    infiniteResources: true,
  },
} as const;

// Performance settings
export const PERFORMANCE_CONFIG = {
  MAX_PARTICLES: 100,
  MAX_SOUND_SOURCES: 16,
  TEXTURE_QUALITY: "high",
  ENABLE_SHADOWS: true,
  ENABLE_POST_PROCESSING: true,
} as const;

// Korean martial arts specific settings
export const MARTIAL_ARTS_CONFIG = {
  VITAL_POINTS_COUNT: 70,
  TRIGRAM_STANCES_COUNT: 8,
  PLAYER_ARCHETYPES_COUNT: 5,

  // Combat timing
  ATTACK_WINDOW: 500, // milliseconds
  COUNTER_WINDOW: 300,
  BLOCK_WINDOW: 200,

  // Stance transition
  MIN_STANCE_CHANGE_INTERVAL: 500,
  STANCE_CHANGE_COST_BASE: 10,

  // Damage calculations
  BASE_DAMAGE_MULTIPLIER: 1.0,
  CRITICAL_HIT_MULTIPLIER: 1.5,
  VITAL_POINT_MULTIPLIER: 2.0,
} as const;

export default GAME_CONFIG;
