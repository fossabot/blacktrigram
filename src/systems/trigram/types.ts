// filepath: /workspaces/blacktrigram/src/systems/trigram/types.ts
/**
 * Type definitions for trigram types
 * Auto-generated by type migration script
 */

// Trigram system imports from shared types
import { EffectType } from "@/types/enums";
import type {
  KoreanText,
  PlayerArchetype,
  PlayerState,
  TrigramStance,
} from "../../types";
import { KoreanTechnique } from "../combat";

export interface TrigramTransitionCost {
  readonly ki: number;
  readonly stamina: number;
  readonly timeMilliseconds: number;
}

export interface TrigramTransitionRule {
  readonly from: TrigramStance;
  readonly to: TrigramStance;
  readonly cost: TrigramTransitionCost;
  readonly effectiveness: number;
  readonly conditions?: ReadonlyArray<{
    type: "player_stat" | "archetype" | "active_effect";
    stat?: "health" | "ki" | "stamina";
    archetype?: PlayerArchetype;
    effectType?: EffectType;
    threshold?: number;
    value?: boolean | string;
  }>;
  readonly description: KoreanText;
}

export interface TransitionMetrics {
  readonly cost: TrigramTransitionCost;
  readonly effectiveness: number;
  readonly risk: number;
  readonly stamina: number;
  readonly timeMilliseconds: number;
}

export interface TransitionPath {
  readonly path: readonly TrigramStance[];
  readonly totalCost: TrigramTransitionCost;
  readonly effectiveness: number;
  readonly name: string;
  readonly description: KoreanText;
}

export interface TrigramTheme {
  readonly primary: number;
  readonly secondary: number;
  readonly active: number;
  readonly hover: number;
  readonly text: number;
}

export interface TrigramData {
  readonly id: TrigramStance;
  readonly korean: string;
  readonly english: string;
  readonly symbol: string;
  readonly element: string;
  readonly nature: "yin" | "yang";
  readonly philosophy: KoreanText;
  readonly combat: KoreanText;
  readonly theme: TrigramTheme;
  readonly name: KoreanText;
  readonly defensiveBonus: number;
  readonly kiFlowModifier: number;
  readonly techniques: {
    readonly primary: {
      readonly korean: string;
      readonly english: string;
      readonly damage: number;
      readonly kiCost: number;
      readonly staminaCost: number;
      readonly hitChance: number;
      readonly criticalChance: number;
      readonly description: KoreanText;
      readonly targetAreas: readonly string[];
      readonly effects: readonly string[];
    };
  };
}

export interface StanceTransition {
  readonly from: TrigramStance;
  readonly to: TrigramStance;
  readonly difficulty: number;
  readonly time: number;
  readonly kiCost: number;
  readonly requirements?: string[];
}

export interface TrigramPhilosophy {
  readonly trigram: TrigramStance;
  readonly principle: KoreanText;
  readonly application: KoreanText;
  readonly strengthsAgainst: readonly TrigramStance[];
  readonly weaknessesAgainst: readonly TrigramStance[];
}

export interface TrigramCombatStyle {
  readonly trigram: TrigramStance;
  readonly combatApproach: string;
  readonly preferredRange: "close" | "medium" | "long";
  readonly focusArea: "offense" | "defense" | "balance";
  readonly keyCharacteristics: readonly string[];
}

export interface TrigramSystemInterface {
  getTechniqueForStance: (
    stance: TrigramStance,
    archetype?: PlayerArchetype
  ) => KoreanTechnique | undefined;
  calculateStanceEffectiveness: (
    attackerStance: TrigramStance,
    defenderStance: TrigramStance,
    technique?: KoreanTechnique
  ) => number;
  isValidTransition: (from: TrigramStance, to: TrigramStance) => boolean;
  getTransitionCost: (
    from: TrigramStance,
    to: TrigramStance,
    player?: PlayerState
  ) => { ki: number; stamina: number; timeMs: number };
  recommendStance: (
    player: PlayerState,
    opponent?: PlayerState
  ) => TrigramStance;
}

export interface TrigramSystem {
  readonly getCurrentStance: (playerId: string) => TrigramStance;
  readonly changeStance: (playerId: string, stance: TrigramStance) => boolean;
  readonly getStanceEffectiveness: (
    attacker: TrigramStance,
    defender: TrigramStance
  ) => number;
}
